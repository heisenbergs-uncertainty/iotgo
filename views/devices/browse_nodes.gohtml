<div class="container-fluid">
    <div class="row">
        <!-- Sidebar for node tree -->
        <div class="col-6  p-0">
            <div class="sidebar" style="min-height: 80vh; background-color: #2D2D2D; border-right: 1px solid #3A3A3A;">
                <div class="p-3">
                    <h3 class="text-white font-weight-bold">Node Tree</h3>
                    <div class="input-group mb-3">
                        <input type="text" id="search-input" class="form-control" placeholder="Search nodes..." style="background-color: #3A3A3A; border: none; color: #F5F5F5;">
                        <button type="button" id="clear-search" class="btn btn-secondary" style="background-color: #6C757D; border: none;">Clear</button>
                    </div>
                    <div id="node-tree" style="max-height: 60vh; overflow-y: auto;">
                        <ul class="list-group list-group-flush">
                            {{range .Nodes}}
                                {{template "node" .}}
                            {{end}}
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- Main content area -->
        <div class="col-6 p-3">
            <div class="card shadow" style="background-color: #2D2D2D; border: none;">
                <div class="card-body">
                    <h1 class="text-white font-weight-bold mb-3">Browse OPC UA Nodes - {{.Device.Name}}</h1>
                    <p class="text-muted">Integration: {{.Integration.IntegrationType}} ({{.Integration.Host}}:{{.Integration.Port}})</p>
                    <p class="text-muted">Total Nodes: {{.TotalNodes}}</p>
                    <form id="node-selection-form">
                        {{.xsrfdata}}
                        <div class="mb-3">
                            <label for="duration" class="form-label text-white">Recording Duration (e.g., 30s, 1m):</label>
                            <input type="text" id="duration" name="duration" class="form-control" placeholder="e.g., 30s" style="background-color: #3A3A3A; border: none; color: #F5F5F5;">
                        </div>
                        <div class="d-flex justify-content-between">
                            <button type="button" class="btn btn-primary" onclick="submitForm('record')" style="background-color: #007BFF; border: none; font-weight: 600;">Record Data</button>
                            <button type="button" class="btn btn-primary" onclick="submitForm('snapshot')" style="background-color: #007BFF; border: none; font-weight: 600;">Take Snapshot</button>
                            <a href="/devices/{{.Device.Id}}" class="btn btn-secondary" style="background-color: #6C757D; border: none; font-weight: 600;">Back to Device</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Template for rendering a node and its children -->
{{define "node"}}
    <li class="list-group-item node-item border-0 p-0"  data-node-id="{{.NodeId}}" data-node-name="{{.BrowseName | html}}" style="background-color: #2D2D2D; margin-left: {{mul .Level 40}}px">
        <div class="d-flex align-items-center node-header" style="padding: 5px 10px;">
            {{if .Children}}
                <button type="button" class="btn btn-link p-0 me-1 expand-btn" data-bs-toggle="collapse" data-bs-target="#node-{{.NodeId | sanitizeID}}" aria-expanded="true" aria-label="Toggle {{.BrowseName}} children" style="color: #00C4B4;">
                    <i class="bi bi-chevron-right"></i>
                </button>
                <span class="me-1 folder-icon" style="color: #00C4B4;">
            <i class="fas fa-folder"></i>
        </span>
            {{else}}
                <span class="me-1" style="color: {{if eq .NodeClass "Object"}}#00C4B4{{else}}#28A745{{end}};">
            {{if eq .NodeClass "Object"}}
                <i class="fas fa-folder"></i>
            {{end}}
        </span>
            {{end}}
            <div class="checkbox me-1">
                <input type="checkbox" name="node_ids" value="{{.NodeId}}" id="node-{{.NodeId | sanitizeID}}" class="node-checkbox {{if .Children}}has-children{{end}}" aria-label="Select {{.BrowseName}}{{if .Children}} and its children{{end}}" data-bs-toggle="tooltip" data-bs-placement="top" title="{{if .Children}}Selects this node and all its children{{else}}Selects this node{{end}}">
            </div>
            <label for="node-{{.NodeId | sanitizeID}}" class="node-label flex-grow-1 mb-0 text-white" data-bs-toggle="tooltip" data-bs-placement="top" title="Node ID: {{.NodeId}}
Display Name: {{.DisplayName}}">{{.BrowseName}} <small class="text-muted">({{.NodeClass}})</small></label>
        </div>
        {{if .Children}}
            <div class="collapse show" id="node-{{.NodeId | sanitizeID}}">
                <ul class="list-group list-group-flush">
                    {{range .Children}}
                        {{template "node" .}}
                    {{end}}
                </ul>
            </div>
        {{end}}
    </li>
{{end}}

<!-- Add Font Awesome CDN -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<style>
    .sidebar {
        background-color: #2D2D2D;
        border-right: 1px solid #3A3A3A;
    }

    .node-item {
        transition: background-color 0.2s ease;
    }

    .node-header:hover {
        background-color: #3A3A3A;
        cursor: pointer;
    }

    .expand-btn[aria-expanded="true"] .bi-chevron-right {
        transform: rotate(90deg);
    }

    .expand-btn .bi-chevron-right {
        transition: transform 0.2s ease;
    }

    .expand-btn[aria-expanded="true"] ~ .folder-icon {
        color: #28A745; /* Green when expanded */
    }

    .expand-btn[aria-expanded="false"] ~ .folder-icon {
        color: #00C4B4; /* Blue when collapsed */
    }

    .custom-checkbox {
        position: relative;
        display: inline-block;
    }

    .custom-checkbox input {
        position: absolute;
        opacity: 0;
        width: 0;
        height: 0;
    }

    .custom-checkbox .checkbox-icon {
        display: inline-block;
        font-size: 1.2rem;
        cursor: pointer;
    }

    .custom-checkbox .checkbox-icon .checked {
        display: none;
    }

    .custom-checkbox input:checked ~ .checkbox-icon .unchecked {
        display: none;
    }

    .custom-checkbox input:checked ~ .checkbox-icon .checked {
        display: inline-block;
    }

    .custom-checkbox:hover .checkbox-icon .unchecked {
        color: #00C4B4;
    }

    .custom-checkbox:hover .checkbox-icon .checked {
        color: #0056b3;
    }

    .custom-checkbox input.has-children ~ .checkbox-icon .unchecked::before {
        content: "\f0c1";
        font-family: "Font Awesome 5 Free";
        font-weight: 900;
        font-size: 0.8rem;
        position: absolute;
        top: -5px;
        right: -5px;
        color: #00C4B4;
    }

    .custom-checkbox input.has-children ~ .checkbox-icon .checked::before {
        content: "\f0c1";
        font-family: "Font Awesome 5 Free";
        font-weight: 900;
        font-size: 0.8rem;
        position: absolute;
        top: -5px;
        right: -5px;
        color: #0056b3;
    }
</style>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        var tooltipList = tooltipTriggerList.map(function(tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl);
        });

        // Search functionality
        const searchInput = document.getElementById("search-input");
        const clearSearch = document.getElementById("clear-search");
        const nodeTree = document.getElementById("node-tree");
        const nodeItems = nodeTree.getElementsByClassName("node-item");

        searchInput.addEventListener("input", function() {
            const searchText = searchInput.value.toLowerCase();
            for (let item of nodeItems) {
                const nodeName = item.getAttribute("data-node-name").toLowerCase();
                const nodeId = item.getAttribute("data-node-id").toLowerCase();
                if (nodeName.includes(searchText) || nodeId.includes(searchText)) {
                    item.style.display = "";
                    // Expand parent nodes
                    let parent = item.parentElement;
                    while (parent && parent.classList.contains("collapse")) {
                        parent.classList.add("show");
                        parent = parent.parentElement;
                    }
                } else {
                    item.style.display = "none";
                }
            }
        });

        clearSearch.addEventListener("click", function() {
            searchInput.value = "";
            for (let item of nodeItems) {
                item.style.display = "";
            }
        });

        // Handle custom checkbox clicks
        nodeTree.addEventListener("click", function(event) {
            let target = event.target;
            if (target.tagName === "I") {
                target = target.parentElement;
            }
            if (target.classList.contains("checkbox-icon")) {
                const checkbox = target.parentElement.querySelector("input[type='checkbox']");
                if (checkbox) {
                    checkbox.checked = !checkbox.checked;
                    console.log("Checkbox", checkbox.id, "toggled to", checkbox.checked);
                    const changeEvent = new Event("change", { bubbles: true });
                    checkbox.dispatchEvent(changeEvent);
                }
            }
        });

        // Handle checkbox state changes for selecting children
        nodeTree.addEventListener("change", function(event) {
            if (event.target.classList.contains("node-checkbox")) {
                const checkbox = event.target;
                if (checkbox.classList.contains("has-children")) {
                    const parentNode = checkbox.closest(".node-item");
                    const childCheckboxes = parentNode.querySelectorAll(".collapse .node-checkbox");
                    childCheckboxes.forEach(childCheckbox => {
                        childCheckbox.checked = checkbox.checked;
                        console.log("Child checkbox", childCheckbox.id, "set to", childCheckbox.checked);
                        const changeEvent = new Event("change", { bubbles: true });
                        childCheckbox.dispatchEvent(changeEvent);
                    });
                }
            }
        });

        // Show loading spinner (optional, if implementing lazy loading)
        function showLoadingSpinner(show) {
            document.getElementById("loading-spinner").style.display = show ? "block" : "none";
        }
    });

    function submitForm(action) {
        const form = document.getElementById("node-selection-form");
        const durationInput = document.getElementById("duration");

        // Validate that at least one node is selected
        const selectedNodes = form.querySelectorAll("input[name='node_ids']:checked");
        console.log("Selected nodes:", selectedNodes.length);
        selectedNodes.forEach(node => {
            console.log("Node ID:", node.value, "Node Name:", node.nextElementSibling.value);
        });
        if (selectedNodes.length === 0) {
            alert("Please select at least one node.");
            return;
        }

        // Validate duration for recording
        if (action === "record" && !durationInput.value) {
            alert("Please specify a recording duration (e.g., 30s, 1m).");
            return;
        }

        // Set the form action based on the button clicked
        form.action = "/devices/{{.Device.Id}}/integrations/{{.Integration.Id}}/" + action;
        form.method = "POST";
        console.log("Submitting form to:", form.action);
        form.submit();
    }
</script>