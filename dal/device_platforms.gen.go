// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/model"
)

func newDevicePlatform(db *gorm.DB, opts ...gen.DOOption) devicePlatform {
	_devicePlatform := devicePlatform{}

	_devicePlatform.devicePlatformDo.UseDB(db, opts...)
	_devicePlatform.devicePlatformDo.UseModel(&model.DevicePlatform{})

	tableName := _devicePlatform.devicePlatformDo.TableName()
	_devicePlatform.ALL = field.NewAsterisk(tableName)
	_devicePlatform.DeviceID = field.NewUint(tableName, "device_id")
	_devicePlatform.PlatformID = field.NewUint(tableName, "platform_id")
	_devicePlatform.CreatedAt = field.NewTime(tableName, "created_at")
	_devicePlatform.DeletedAt = field.NewField(tableName, "deleted_at")
	_devicePlatform.DeviceAlias = field.NewString(tableName, "device_alias")
	_devicePlatform.Metadata = field.NewString(tableName, "metadata")

	_devicePlatform.fillFieldMap()

	return _devicePlatform
}

type devicePlatform struct {
	devicePlatformDo

	ALL         field.Asterisk
	DeviceID    field.Uint
	PlatformID  field.Uint
	CreatedAt   field.Time
	DeletedAt   field.Field
	DeviceAlias field.String
	Metadata    field.String

	fieldMap map[string]field.Expr
}

func (d devicePlatform) Table(newTableName string) *devicePlatform {
	d.devicePlatformDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d devicePlatform) As(alias string) *devicePlatform {
	d.devicePlatformDo.DO = *(d.devicePlatformDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *devicePlatform) updateTableName(table string) *devicePlatform {
	d.ALL = field.NewAsterisk(table)
	d.DeviceID = field.NewUint(table, "device_id")
	d.PlatformID = field.NewUint(table, "platform_id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.DeviceAlias = field.NewString(table, "device_alias")
	d.Metadata = field.NewString(table, "metadata")

	d.fillFieldMap()

	return d
}

func (d *devicePlatform) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *devicePlatform) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["device_id"] = d.DeviceID
	d.fieldMap["platform_id"] = d.PlatformID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["device_alias"] = d.DeviceAlias
	d.fieldMap["metadata"] = d.Metadata
}

func (d devicePlatform) clone(db *gorm.DB) devicePlatform {
	d.devicePlatformDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d devicePlatform) replaceDB(db *gorm.DB) devicePlatform {
	d.devicePlatformDo.ReplaceDB(db)
	return d
}

type devicePlatformDo struct{ gen.DO }

type IDevicePlatformDo interface {
	gen.SubQuery
	Debug() IDevicePlatformDo
	WithContext(ctx context.Context) IDevicePlatformDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDevicePlatformDo
	WriteDB() IDevicePlatformDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDevicePlatformDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDevicePlatformDo
	Not(conds ...gen.Condition) IDevicePlatformDo
	Or(conds ...gen.Condition) IDevicePlatformDo
	Select(conds ...field.Expr) IDevicePlatformDo
	Where(conds ...gen.Condition) IDevicePlatformDo
	Order(conds ...field.Expr) IDevicePlatformDo
	Distinct(cols ...field.Expr) IDevicePlatformDo
	Omit(cols ...field.Expr) IDevicePlatformDo
	Join(table schema.Tabler, on ...field.Expr) IDevicePlatformDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDevicePlatformDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDevicePlatformDo
	Group(cols ...field.Expr) IDevicePlatformDo
	Having(conds ...gen.Condition) IDevicePlatformDo
	Limit(limit int) IDevicePlatformDo
	Offset(offset int) IDevicePlatformDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDevicePlatformDo
	Unscoped() IDevicePlatformDo
	Create(values ...*model.DevicePlatform) error
	CreateInBatches(values []*model.DevicePlatform, batchSize int) error
	Save(values ...*model.DevicePlatform) error
	First() (*model.DevicePlatform, error)
	Take() (*model.DevicePlatform, error)
	Last() (*model.DevicePlatform, error)
	Find() ([]*model.DevicePlatform, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DevicePlatform, err error)
	FindInBatches(result *[]*model.DevicePlatform, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DevicePlatform) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDevicePlatformDo
	Assign(attrs ...field.AssignExpr) IDevicePlatformDo
	Joins(fields ...field.RelationField) IDevicePlatformDo
	Preload(fields ...field.RelationField) IDevicePlatformDo
	FirstOrInit() (*model.DevicePlatform, error)
	FirstOrCreate() (*model.DevicePlatform, error)
	FindByPage(offset int, limit int) (result []*model.DevicePlatform, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDevicePlatformDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d devicePlatformDo) Debug() IDevicePlatformDo {
	return d.withDO(d.DO.Debug())
}

func (d devicePlatformDo) WithContext(ctx context.Context) IDevicePlatformDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d devicePlatformDo) ReadDB() IDevicePlatformDo {
	return d.Clauses(dbresolver.Read)
}

func (d devicePlatformDo) WriteDB() IDevicePlatformDo {
	return d.Clauses(dbresolver.Write)
}

func (d devicePlatformDo) Session(config *gorm.Session) IDevicePlatformDo {
	return d.withDO(d.DO.Session(config))
}

func (d devicePlatformDo) Clauses(conds ...clause.Expression) IDevicePlatformDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d devicePlatformDo) Returning(value interface{}, columns ...string) IDevicePlatformDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d devicePlatformDo) Not(conds ...gen.Condition) IDevicePlatformDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d devicePlatformDo) Or(conds ...gen.Condition) IDevicePlatformDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d devicePlatformDo) Select(conds ...field.Expr) IDevicePlatformDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d devicePlatformDo) Where(conds ...gen.Condition) IDevicePlatformDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d devicePlatformDo) Order(conds ...field.Expr) IDevicePlatformDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d devicePlatformDo) Distinct(cols ...field.Expr) IDevicePlatformDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d devicePlatformDo) Omit(cols ...field.Expr) IDevicePlatformDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d devicePlatformDo) Join(table schema.Tabler, on ...field.Expr) IDevicePlatformDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d devicePlatformDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDevicePlatformDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d devicePlatformDo) RightJoin(table schema.Tabler, on ...field.Expr) IDevicePlatformDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d devicePlatformDo) Group(cols ...field.Expr) IDevicePlatformDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d devicePlatformDo) Having(conds ...gen.Condition) IDevicePlatformDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d devicePlatformDo) Limit(limit int) IDevicePlatformDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d devicePlatformDo) Offset(offset int) IDevicePlatformDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d devicePlatformDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDevicePlatformDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d devicePlatformDo) Unscoped() IDevicePlatformDo {
	return d.withDO(d.DO.Unscoped())
}

func (d devicePlatformDo) Create(values ...*model.DevicePlatform) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d devicePlatformDo) CreateInBatches(values []*model.DevicePlatform, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d devicePlatformDo) Save(values ...*model.DevicePlatform) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d devicePlatformDo) First() (*model.DevicePlatform, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DevicePlatform), nil
	}
}

func (d devicePlatformDo) Take() (*model.DevicePlatform, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DevicePlatform), nil
	}
}

func (d devicePlatformDo) Last() (*model.DevicePlatform, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DevicePlatform), nil
	}
}

func (d devicePlatformDo) Find() ([]*model.DevicePlatform, error) {
	result, err := d.DO.Find()
	return result.([]*model.DevicePlatform), err
}

func (d devicePlatformDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DevicePlatform, err error) {
	buf := make([]*model.DevicePlatform, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d devicePlatformDo) FindInBatches(result *[]*model.DevicePlatform, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d devicePlatformDo) Attrs(attrs ...field.AssignExpr) IDevicePlatformDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d devicePlatformDo) Assign(attrs ...field.AssignExpr) IDevicePlatformDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d devicePlatformDo) Joins(fields ...field.RelationField) IDevicePlatformDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d devicePlatformDo) Preload(fields ...field.RelationField) IDevicePlatformDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d devicePlatformDo) FirstOrInit() (*model.DevicePlatform, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DevicePlatform), nil
	}
}

func (d devicePlatformDo) FirstOrCreate() (*model.DevicePlatform, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DevicePlatform), nil
	}
}

func (d devicePlatformDo) FindByPage(offset int, limit int) (result []*model.DevicePlatform, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d devicePlatformDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d devicePlatformDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d devicePlatformDo) Delete(models ...*model.DevicePlatform) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *devicePlatformDo) withDO(do gen.Dao) *devicePlatformDo {
	d.DO = *do.(*gen.DO)
	return d
}
