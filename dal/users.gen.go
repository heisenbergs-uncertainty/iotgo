// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/model"
)

func newUser(db *gorm.DB, opts ...gen.DOOption) user {
	_user := user{}

	_user.userDo.UseDB(db, opts...)
	_user.userDo.UseModel(&model.User{})

	tableName := _user.userDo.TableName()
	_user.ALL = field.NewAsterisk(tableName)
	_user.ID = field.NewUint(tableName, "id")
	_user.CreatedAt = field.NewTime(tableName, "created_at")
	_user.UpdatedAt = field.NewTime(tableName, "updated_at")
	_user.DeletedAt = field.NewField(tableName, "deleted_at")
	_user.Email = field.NewString(tableName, "email")
	_user.Password = field.NewString(tableName, "password")
	_user.Name = field.NewString(tableName, "name")
	_user.Role = field.NewString(tableName, "role")
	_user.Avatar = field.NewString(tableName, "avatar")
	_user.Bio = field.NewString(tableName, "bio")
	_user.LastLogin = field.NewTime(tableName, "last_login")
	_user.Metadata = field.NewString(tableName, "metadata")
	_user.UserInteractions = userHasManyUserInteractions{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("UserInteractions", "model.UserInteraction"),
	}

	_user.ApiKeys = userHasManyApiKeys{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("ApiKeys", "model.ApiKey"),
		User: struct {
			field.RelationField
			UserInteractions struct {
				field.RelationField
			}
			ApiKeys struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("ApiKeys.User", "model.User"),
			UserInteractions: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("ApiKeys.User.UserInteractions", "model.UserInteraction"),
			},
			ApiKeys: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("ApiKeys.User.ApiKeys", "model.ApiKey"),
			},
		},
	}

	_user.fillFieldMap()

	return _user
}

type user struct {
	userDo

	ALL              field.Asterisk
	ID               field.Uint
	CreatedAt        field.Time
	UpdatedAt        field.Time
	DeletedAt        field.Field
	Email            field.String
	Password         field.String
	Name             field.String
	Role             field.String
	Avatar           field.String
	Bio              field.String
	LastLogin        field.Time
	Metadata         field.String
	UserInteractions userHasManyUserInteractions

	ApiKeys userHasManyApiKeys

	fieldMap map[string]field.Expr
}

func (u user) Table(newTableName string) *user {
	u.userDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u user) As(alias string) *user {
	u.userDo.DO = *(u.userDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *user) updateTableName(table string) *user {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.Email = field.NewString(table, "email")
	u.Password = field.NewString(table, "password")
	u.Name = field.NewString(table, "name")
	u.Role = field.NewString(table, "role")
	u.Avatar = field.NewString(table, "avatar")
	u.Bio = field.NewString(table, "bio")
	u.LastLogin = field.NewTime(table, "last_login")
	u.Metadata = field.NewString(table, "metadata")

	u.fillFieldMap()

	return u
}

func (u *user) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *user) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 14)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["email"] = u.Email
	u.fieldMap["password"] = u.Password
	u.fieldMap["name"] = u.Name
	u.fieldMap["role"] = u.Role
	u.fieldMap["avatar"] = u.Avatar
	u.fieldMap["bio"] = u.Bio
	u.fieldMap["last_login"] = u.LastLogin
	u.fieldMap["metadata"] = u.Metadata

}

func (u user) clone(db *gorm.DB) user {
	u.userDo.ReplaceConnPool(db.Statement.ConnPool)
	u.UserInteractions.db = db.Session(&gorm.Session{Initialized: true})
	u.UserInteractions.db.Statement.ConnPool = db.Statement.ConnPool
	u.ApiKeys.db = db.Session(&gorm.Session{Initialized: true})
	u.ApiKeys.db.Statement.ConnPool = db.Statement.ConnPool
	return u
}

func (u user) replaceDB(db *gorm.DB) user {
	u.userDo.ReplaceDB(db)
	u.UserInteractions.db = db.Session(&gorm.Session{})
	u.ApiKeys.db = db.Session(&gorm.Session{})
	return u
}

type userHasManyUserInteractions struct {
	db *gorm.DB

	field.RelationField
}

func (a userHasManyUserInteractions) Where(conds ...field.Expr) *userHasManyUserInteractions {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyUserInteractions) WithContext(ctx context.Context) *userHasManyUserInteractions {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyUserInteractions) Session(session *gorm.Session) *userHasManyUserInteractions {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasManyUserInteractions) Model(m *model.User) *userHasManyUserInteractionsTx {
	return &userHasManyUserInteractionsTx{a.db.Model(m).Association(a.Name())}
}

func (a userHasManyUserInteractions) Unscoped() *userHasManyUserInteractions {
	a.db = a.db.Unscoped()
	return &a
}

type userHasManyUserInteractionsTx struct{ tx *gorm.Association }

func (a userHasManyUserInteractionsTx) Find() (result []*model.UserInteraction, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyUserInteractionsTx) Append(values ...*model.UserInteraction) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyUserInteractionsTx) Replace(values ...*model.UserInteraction) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyUserInteractionsTx) Delete(values ...*model.UserInteraction) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyUserInteractionsTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyUserInteractionsTx) Count() int64 {
	return a.tx.Count()
}

func (a userHasManyUserInteractionsTx) Unscoped() *userHasManyUserInteractionsTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type userHasManyApiKeys struct {
	db *gorm.DB

	field.RelationField

	User struct {
		field.RelationField
		UserInteractions struct {
			field.RelationField
		}
		ApiKeys struct {
			field.RelationField
		}
	}
}

func (a userHasManyApiKeys) Where(conds ...field.Expr) *userHasManyApiKeys {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a userHasManyApiKeys) WithContext(ctx context.Context) *userHasManyApiKeys {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a userHasManyApiKeys) Session(session *gorm.Session) *userHasManyApiKeys {
	a.db = a.db.Session(session)
	return &a
}

func (a userHasManyApiKeys) Model(m *model.User) *userHasManyApiKeysTx {
	return &userHasManyApiKeysTx{a.db.Model(m).Association(a.Name())}
}

func (a userHasManyApiKeys) Unscoped() *userHasManyApiKeys {
	a.db = a.db.Unscoped()
	return &a
}

type userHasManyApiKeysTx struct{ tx *gorm.Association }

func (a userHasManyApiKeysTx) Find() (result []*model.ApiKey, err error) {
	return result, a.tx.Find(&result)
}

func (a userHasManyApiKeysTx) Append(values ...*model.ApiKey) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a userHasManyApiKeysTx) Replace(values ...*model.ApiKey) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a userHasManyApiKeysTx) Delete(values ...*model.ApiKey) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a userHasManyApiKeysTx) Clear() error {
	return a.tx.Clear()
}

func (a userHasManyApiKeysTx) Count() int64 {
	return a.tx.Count()
}

func (a userHasManyApiKeysTx) Unscoped() *userHasManyApiKeysTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type userDo struct{ gen.DO }

type IUserDo interface {
	gen.SubQuery
	Debug() IUserDo
	WithContext(ctx context.Context) IUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserDo
	WriteDB() IUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserDo
	Not(conds ...gen.Condition) IUserDo
	Or(conds ...gen.Condition) IUserDo
	Select(conds ...field.Expr) IUserDo
	Where(conds ...gen.Condition) IUserDo
	Order(conds ...field.Expr) IUserDo
	Distinct(cols ...field.Expr) IUserDo
	Omit(cols ...field.Expr) IUserDo
	Join(table schema.Tabler, on ...field.Expr) IUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserDo
	Group(cols ...field.Expr) IUserDo
	Having(conds ...gen.Condition) IUserDo
	Limit(limit int) IUserDo
	Offset(offset int) IUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo
	Unscoped() IUserDo
	Create(values ...*model.User) error
	CreateInBatches(values []*model.User, batchSize int) error
	Save(values ...*model.User) error
	First() (*model.User, error)
	Take() (*model.User, error)
	Last() (*model.User, error)
	Find() ([]*model.User, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.User, err error)
	FindInBatches(result *[]*model.User, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.User) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserDo
	Assign(attrs ...field.AssignExpr) IUserDo
	Joins(fields ...field.RelationField) IUserDo
	Preload(fields ...field.RelationField) IUserDo
	FirstOrInit() (*model.User, error)
	FirstOrCreate() (*model.User, error)
	FindByPage(offset int, limit int) (result []*model.User, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FindByEmail(email string) (result model.User, err error)
	FindByRole(role string) (result []model.User, err error)
	FindActiveUsers() (result []model.User, err error)
}

// SELECT * FROM @@table WHERE email = @email LIMIT 1
func (u userDo) FindByEmail(email string) (result model.User, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, email)
	generateSQL.WriteString("SELECT * FROM users WHERE email = ? LIMIT 1 ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE role = @role
func (u userDo) FindByRole(role string) (result []model.User, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, role)
	generateSQL.WriteString("SELECT * FROM users WHERE role = ? ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE last_login IS NOT NULL
func (u userDo) FindActiveUsers() (result []model.User, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM users WHERE last_login IS NOT NULL ")

	var executeSQL *gorm.DB
	executeSQL = u.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (u userDo) Debug() IUserDo {
	return u.withDO(u.DO.Debug())
}

func (u userDo) WithContext(ctx context.Context) IUserDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDo) ReadDB() IUserDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDo) WriteDB() IUserDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDo) Session(config *gorm.Session) IUserDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDo) Clauses(conds ...clause.Expression) IUserDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDo) Returning(value interface{}, columns ...string) IUserDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDo) Not(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDo) Or(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDo) Select(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDo) Where(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDo) Order(conds ...field.Expr) IUserDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDo) Distinct(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDo) Omit(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDo) Join(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDo) Group(cols ...field.Expr) IUserDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDo) Having(conds ...gen.Condition) IUserDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDo) Limit(limit int) IUserDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDo) Offset(offset int) IUserDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDo) Unscoped() IUserDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDo) Create(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDo) CreateInBatches(values []*model.User, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDo) Save(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDo) First() (*model.User, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Take() (*model.User, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Last() (*model.User, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Find() ([]*model.User, error) {
	result, err := u.DO.Find()
	return result.([]*model.User), err
}

func (u userDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.User, err error) {
	buf := make([]*model.User, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDo) FindInBatches(result *[]*model.User, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDo) Attrs(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDo) Assign(attrs ...field.AssignExpr) IUserDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDo) Joins(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDo) Preload(fields ...field.RelationField) IUserDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDo) FirstOrInit() (*model.User, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FirstOrCreate() (*model.User, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FindByPage(offset int, limit int) (result []*model.User, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDo) Delete(models ...*model.User) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDo) withDO(do gen.Dao) *userDo {
	u.DO = *do.(*gen.DO)
	return u
}
