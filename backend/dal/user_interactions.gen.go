// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/model"
)

func newUserInteraction(db *gorm.DB, opts ...gen.DOOption) userInteraction {
	_userInteraction := userInteraction{}

	_userInteraction.userInteractionDo.UseDB(db, opts...)
	_userInteraction.userInteractionDo.UseModel(&model.UserInteraction{})

	tableName := _userInteraction.userInteractionDo.TableName()
	_userInteraction.ALL = field.NewAsterisk(tableName)
	_userInteraction.ID = field.NewUint(tableName, "id")
	_userInteraction.CreatedAt = field.NewTime(tableName, "created_at")
	_userInteraction.UpdatedAt = field.NewTime(tableName, "updated_at")
	_userInteraction.DeletedAt = field.NewField(tableName, "deleted_at")
	_userInteraction.UserID = field.NewUint(tableName, "user_id")
	_userInteraction.Action = field.NewString(tableName, "action")
	_userInteraction.Metadata = field.NewString(tableName, "metadata")
	_userInteraction.Occurred = field.NewTime(tableName, "occurred")

	_userInteraction.fillFieldMap()

	return _userInteraction
}

type userInteraction struct {
	userInteractionDo

	ALL       field.Asterisk
	ID        field.Uint
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Field
	UserID    field.Uint
	Action    field.String
	Metadata  field.String
	Occurred  field.Time

	fieldMap map[string]field.Expr
}

func (u userInteraction) Table(newTableName string) *userInteraction {
	u.userInteractionDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userInteraction) As(alias string) *userInteraction {
	u.userInteractionDo.DO = *(u.userInteractionDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userInteraction) updateTableName(table string) *userInteraction {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint(table, "id")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")
	u.UserID = field.NewUint(table, "user_id")
	u.Action = field.NewString(table, "action")
	u.Metadata = field.NewString(table, "metadata")
	u.Occurred = field.NewTime(table, "occurred")

	u.fillFieldMap()

	return u
}

func (u *userInteraction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userInteraction) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["action"] = u.Action
	u.fieldMap["metadata"] = u.Metadata
	u.fieldMap["occurred"] = u.Occurred
}

func (u userInteraction) clone(db *gorm.DB) userInteraction {
	u.userInteractionDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userInteraction) replaceDB(db *gorm.DB) userInteraction {
	u.userInteractionDo.ReplaceDB(db)
	return u
}

type userInteractionDo struct{ gen.DO }

type IUserInteractionDo interface {
	gen.SubQuery
	Debug() IUserInteractionDo
	WithContext(ctx context.Context) IUserInteractionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserInteractionDo
	WriteDB() IUserInteractionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserInteractionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserInteractionDo
	Not(conds ...gen.Condition) IUserInteractionDo
	Or(conds ...gen.Condition) IUserInteractionDo
	Select(conds ...field.Expr) IUserInteractionDo
	Where(conds ...gen.Condition) IUserInteractionDo
	Order(conds ...field.Expr) IUserInteractionDo
	Distinct(cols ...field.Expr) IUserInteractionDo
	Omit(cols ...field.Expr) IUserInteractionDo
	Join(table schema.Tabler, on ...field.Expr) IUserInteractionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserInteractionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserInteractionDo
	Group(cols ...field.Expr) IUserInteractionDo
	Having(conds ...gen.Condition) IUserInteractionDo
	Limit(limit int) IUserInteractionDo
	Offset(offset int) IUserInteractionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserInteractionDo
	Unscoped() IUserInteractionDo
	Create(values ...*model.UserInteraction) error
	CreateInBatches(values []*model.UserInteraction, batchSize int) error
	Save(values ...*model.UserInteraction) error
	First() (*model.UserInteraction, error)
	Take() (*model.UserInteraction, error)
	Last() (*model.UserInteraction, error)
	Find() ([]*model.UserInteraction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserInteraction, err error)
	FindInBatches(result *[]*model.UserInteraction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserInteraction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserInteractionDo
	Assign(attrs ...field.AssignExpr) IUserInteractionDo
	Joins(fields ...field.RelationField) IUserInteractionDo
	Preload(fields ...field.RelationField) IUserInteractionDo
	FirstOrInit() (*model.UserInteraction, error)
	FirstOrCreate() (*model.UserInteraction, error)
	FindByPage(offset int, limit int) (result []*model.UserInteraction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserInteractionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userInteractionDo) Debug() IUserInteractionDo {
	return u.withDO(u.DO.Debug())
}

func (u userInteractionDo) WithContext(ctx context.Context) IUserInteractionDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userInteractionDo) ReadDB() IUserInteractionDo {
	return u.Clauses(dbresolver.Read)
}

func (u userInteractionDo) WriteDB() IUserInteractionDo {
	return u.Clauses(dbresolver.Write)
}

func (u userInteractionDo) Session(config *gorm.Session) IUserInteractionDo {
	return u.withDO(u.DO.Session(config))
}

func (u userInteractionDo) Clauses(conds ...clause.Expression) IUserInteractionDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userInteractionDo) Returning(value interface{}, columns ...string) IUserInteractionDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userInteractionDo) Not(conds ...gen.Condition) IUserInteractionDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userInteractionDo) Or(conds ...gen.Condition) IUserInteractionDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userInteractionDo) Select(conds ...field.Expr) IUserInteractionDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userInteractionDo) Where(conds ...gen.Condition) IUserInteractionDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userInteractionDo) Order(conds ...field.Expr) IUserInteractionDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userInteractionDo) Distinct(cols ...field.Expr) IUserInteractionDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userInteractionDo) Omit(cols ...field.Expr) IUserInteractionDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userInteractionDo) Join(table schema.Tabler, on ...field.Expr) IUserInteractionDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userInteractionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserInteractionDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userInteractionDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserInteractionDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userInteractionDo) Group(cols ...field.Expr) IUserInteractionDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userInteractionDo) Having(conds ...gen.Condition) IUserInteractionDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userInteractionDo) Limit(limit int) IUserInteractionDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userInteractionDo) Offset(offset int) IUserInteractionDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userInteractionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserInteractionDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userInteractionDo) Unscoped() IUserInteractionDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userInteractionDo) Create(values ...*model.UserInteraction) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userInteractionDo) CreateInBatches(values []*model.UserInteraction, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userInteractionDo) Save(values ...*model.UserInteraction) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userInteractionDo) First() (*model.UserInteraction, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInteraction), nil
	}
}

func (u userInteractionDo) Take() (*model.UserInteraction, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInteraction), nil
	}
}

func (u userInteractionDo) Last() (*model.UserInteraction, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInteraction), nil
	}
}

func (u userInteractionDo) Find() ([]*model.UserInteraction, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserInteraction), err
}

func (u userInteractionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserInteraction, err error) {
	buf := make([]*model.UserInteraction, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userInteractionDo) FindInBatches(result *[]*model.UserInteraction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userInteractionDo) Attrs(attrs ...field.AssignExpr) IUserInteractionDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userInteractionDo) Assign(attrs ...field.AssignExpr) IUserInteractionDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userInteractionDo) Joins(fields ...field.RelationField) IUserInteractionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userInteractionDo) Preload(fields ...field.RelationField) IUserInteractionDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userInteractionDo) FirstOrInit() (*model.UserInteraction, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInteraction), nil
	}
}

func (u userInteractionDo) FirstOrCreate() (*model.UserInteraction, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserInteraction), nil
	}
}

func (u userInteractionDo) FindByPage(offset int, limit int) (result []*model.UserInteraction, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userInteractionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userInteractionDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userInteractionDo) Delete(models ...*model.UserInteraction) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userInteractionDo) withDO(do gen.Dao) *userInteractionDo {
	u.DO = *do.(*gen.DO)
	return u
}
