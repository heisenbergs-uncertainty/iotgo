// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/model"
)

func newPlatform(db *gorm.DB, opts ...gen.DOOption) platform {
	_platform := platform{}

	_platform.platformDo.UseDB(db, opts...)
	_platform.platformDo.UseModel(&model.Platform{})

	tableName := _platform.platformDo.TableName()
	_platform.ALL = field.NewAsterisk(tableName)
	_platform.ID = field.NewUint(tableName, "id")
	_platform.CreatedAt = field.NewTime(tableName, "created_at")
	_platform.UpdatedAt = field.NewTime(tableName, "updated_at")
	_platform.DeletedAt = field.NewField(tableName, "deleted_at")
	_platform.Name = field.NewString(tableName, "name")
	_platform.Type = field.NewString(tableName, "type")
	_platform.ConnectionState = field.NewString(tableName, "connection_state")
	_platform.LastConnected = field.NewTime(tableName, "last_connected")
	_platform.OrganizationID = field.NewInt(tableName, "organization_id")
	_platform.IsActive = field.NewBool(tableName, "is_active")
	_platform.Metadata = field.NewString(tableName, "metadata")
	_platform.Resources = platformHasManyResources{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Resources", "model.Resource"),
	}

	_platform.Devices = platformManyToManyDevices{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Devices", "model.Device"),
		Site: struct {
			field.RelationField
			Devices struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Devices.Site", "model.Site"),
			Devices: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Devices.Site.Devices", "model.Device"),
			},
		},
		ValueStream: struct {
			field.RelationField
			Devices struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Devices.ValueStream", "model.ValueStream"),
			Devices: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Devices.ValueStream.Devices", "model.Device"),
			},
		},
		Platforms: struct {
			field.RelationField
			Resources struct {
				field.RelationField
			}
			Devices struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Devices.Platforms", "model.Platform"),
			Resources: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Devices.Platforms.Resources", "model.Resource"),
			},
			Devices: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Devices.Platforms.Devices", "model.Device"),
			},
		},
	}

	_platform.fillFieldMap()

	return _platform
}

type platform struct {
	platformDo

	ALL             field.Asterisk
	ID              field.Uint
	CreatedAt       field.Time
	UpdatedAt       field.Time
	DeletedAt       field.Field
	Name            field.String
	Type            field.String
	ConnectionState field.String
	LastConnected   field.Time
	OrganizationID  field.Int
	IsActive        field.Bool
	Metadata        field.String
	Resources       platformHasManyResources

	Devices platformManyToManyDevices

	fieldMap map[string]field.Expr
}

func (p platform) Table(newTableName string) *platform {
	p.platformDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p platform) As(alias string) *platform {
	p.platformDo.DO = *(p.platformDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *platform) updateTableName(table string) *platform {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewUint(table, "id")
	p.CreatedAt = field.NewTime(table, "created_at")
	p.UpdatedAt = field.NewTime(table, "updated_at")
	p.DeletedAt = field.NewField(table, "deleted_at")
	p.Name = field.NewString(table, "name")
	p.Type = field.NewString(table, "type")
	p.ConnectionState = field.NewString(table, "connection_state")
	p.LastConnected = field.NewTime(table, "last_connected")
	p.OrganizationID = field.NewInt(table, "organization_id")
	p.IsActive = field.NewBool(table, "is_active")
	p.Metadata = field.NewString(table, "metadata")

	p.fillFieldMap()

	return p
}

func (p *platform) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *platform) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 13)
	p.fieldMap["id"] = p.ID
	p.fieldMap["created_at"] = p.CreatedAt
	p.fieldMap["updated_at"] = p.UpdatedAt
	p.fieldMap["deleted_at"] = p.DeletedAt
	p.fieldMap["name"] = p.Name
	p.fieldMap["type"] = p.Type
	p.fieldMap["connection_state"] = p.ConnectionState
	p.fieldMap["last_connected"] = p.LastConnected
	p.fieldMap["organization_id"] = p.OrganizationID
	p.fieldMap["is_active"] = p.IsActive
	p.fieldMap["metadata"] = p.Metadata

}

func (p platform) clone(db *gorm.DB) platform {
	p.platformDo.ReplaceConnPool(db.Statement.ConnPool)
	p.Resources.db = db.Session(&gorm.Session{Initialized: true})
	p.Resources.db.Statement.ConnPool = db.Statement.ConnPool
	p.Devices.db = db.Session(&gorm.Session{Initialized: true})
	p.Devices.db.Statement.ConnPool = db.Statement.ConnPool
	return p
}

func (p platform) replaceDB(db *gorm.DB) platform {
	p.platformDo.ReplaceDB(db)
	p.Resources.db = db.Session(&gorm.Session{})
	p.Devices.db = db.Session(&gorm.Session{})
	return p
}

type platformHasManyResources struct {
	db *gorm.DB

	field.RelationField
}

func (a platformHasManyResources) Where(conds ...field.Expr) *platformHasManyResources {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a platformHasManyResources) WithContext(ctx context.Context) *platformHasManyResources {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a platformHasManyResources) Session(session *gorm.Session) *platformHasManyResources {
	a.db = a.db.Session(session)
	return &a
}

func (a platformHasManyResources) Model(m *model.Platform) *platformHasManyResourcesTx {
	return &platformHasManyResourcesTx{a.db.Model(m).Association(a.Name())}
}

func (a platformHasManyResources) Unscoped() *platformHasManyResources {
	a.db = a.db.Unscoped()
	return &a
}

type platformHasManyResourcesTx struct{ tx *gorm.Association }

func (a platformHasManyResourcesTx) Find() (result []*model.Resource, err error) {
	return result, a.tx.Find(&result)
}

func (a platformHasManyResourcesTx) Append(values ...*model.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a platformHasManyResourcesTx) Replace(values ...*model.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a platformHasManyResourcesTx) Delete(values ...*model.Resource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a platformHasManyResourcesTx) Clear() error {
	return a.tx.Clear()
}

func (a platformHasManyResourcesTx) Count() int64 {
	return a.tx.Count()
}

func (a platformHasManyResourcesTx) Unscoped() *platformHasManyResourcesTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type platformManyToManyDevices struct {
	db *gorm.DB

	field.RelationField

	Site struct {
		field.RelationField
		Devices struct {
			field.RelationField
		}
	}
	ValueStream struct {
		field.RelationField
		Devices struct {
			field.RelationField
		}
	}
	Platforms struct {
		field.RelationField
		Resources struct {
			field.RelationField
		}
		Devices struct {
			field.RelationField
		}
	}
}

func (a platformManyToManyDevices) Where(conds ...field.Expr) *platformManyToManyDevices {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a platformManyToManyDevices) WithContext(ctx context.Context) *platformManyToManyDevices {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a platformManyToManyDevices) Session(session *gorm.Session) *platformManyToManyDevices {
	a.db = a.db.Session(session)
	return &a
}

func (a platformManyToManyDevices) Model(m *model.Platform) *platformManyToManyDevicesTx {
	return &platformManyToManyDevicesTx{a.db.Model(m).Association(a.Name())}
}

func (a platformManyToManyDevices) Unscoped() *platformManyToManyDevices {
	a.db = a.db.Unscoped()
	return &a
}

type platformManyToManyDevicesTx struct{ tx *gorm.Association }

func (a platformManyToManyDevicesTx) Find() (result []*model.Device, err error) {
	return result, a.tx.Find(&result)
}

func (a platformManyToManyDevicesTx) Append(values ...*model.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a platformManyToManyDevicesTx) Replace(values ...*model.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a platformManyToManyDevicesTx) Delete(values ...*model.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a platformManyToManyDevicesTx) Clear() error {
	return a.tx.Clear()
}

func (a platformManyToManyDevicesTx) Count() int64 {
	return a.tx.Count()
}

func (a platformManyToManyDevicesTx) Unscoped() *platformManyToManyDevicesTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type platformDo struct{ gen.DO }

type IPlatformDo interface {
	gen.SubQuery
	Debug() IPlatformDo
	WithContext(ctx context.Context) IPlatformDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IPlatformDo
	WriteDB() IPlatformDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IPlatformDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IPlatformDo
	Not(conds ...gen.Condition) IPlatformDo
	Or(conds ...gen.Condition) IPlatformDo
	Select(conds ...field.Expr) IPlatformDo
	Where(conds ...gen.Condition) IPlatformDo
	Order(conds ...field.Expr) IPlatformDo
	Distinct(cols ...field.Expr) IPlatformDo
	Omit(cols ...field.Expr) IPlatformDo
	Join(table schema.Tabler, on ...field.Expr) IPlatformDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IPlatformDo
	RightJoin(table schema.Tabler, on ...field.Expr) IPlatformDo
	Group(cols ...field.Expr) IPlatformDo
	Having(conds ...gen.Condition) IPlatformDo
	Limit(limit int) IPlatformDo
	Offset(offset int) IPlatformDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IPlatformDo
	Unscoped() IPlatformDo
	Create(values ...*model.Platform) error
	CreateInBatches(values []*model.Platform, batchSize int) error
	Save(values ...*model.Platform) error
	First() (*model.Platform, error)
	Take() (*model.Platform, error)
	Last() (*model.Platform, error)
	Find() ([]*model.Platform, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Platform, err error)
	FindInBatches(result *[]*model.Platform, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Platform) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IPlatformDo
	Assign(attrs ...field.AssignExpr) IPlatformDo
	Joins(fields ...field.RelationField) IPlatformDo
	Preload(fields ...field.RelationField) IPlatformDo
	FirstOrInit() (*model.Platform, error)
	FirstOrCreate() (*model.Platform, error)
	FindByPage(offset int, limit int) (result []*model.Platform, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IPlatformDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FindByType(platformType string) (result []model.Platform, err error)
	FindActivePlatforms() (result []model.Platform, err error)
}

// SELECT * FROM @@table WHERE type = @platformType
func (p platformDo) FindByType(platformType string) (result []model.Platform, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, platformType)
	generateSQL.WriteString("SELECT * FROM platforms WHERE type = ? ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE is_active = true
func (p platformDo) FindActivePlatforms() (result []model.Platform, err error) {
	var generateSQL strings.Builder
	generateSQL.WriteString("SELECT * FROM platforms WHERE is_active = true ")

	var executeSQL *gorm.DB
	executeSQL = p.UnderlyingDB().Raw(generateSQL.String()).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (p platformDo) Debug() IPlatformDo {
	return p.withDO(p.DO.Debug())
}

func (p platformDo) WithContext(ctx context.Context) IPlatformDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p platformDo) ReadDB() IPlatformDo {
	return p.Clauses(dbresolver.Read)
}

func (p platformDo) WriteDB() IPlatformDo {
	return p.Clauses(dbresolver.Write)
}

func (p platformDo) Session(config *gorm.Session) IPlatformDo {
	return p.withDO(p.DO.Session(config))
}

func (p platformDo) Clauses(conds ...clause.Expression) IPlatformDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p platformDo) Returning(value interface{}, columns ...string) IPlatformDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p platformDo) Not(conds ...gen.Condition) IPlatformDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p platformDo) Or(conds ...gen.Condition) IPlatformDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p platformDo) Select(conds ...field.Expr) IPlatformDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p platformDo) Where(conds ...gen.Condition) IPlatformDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p platformDo) Order(conds ...field.Expr) IPlatformDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p platformDo) Distinct(cols ...field.Expr) IPlatformDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p platformDo) Omit(cols ...field.Expr) IPlatformDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p platformDo) Join(table schema.Tabler, on ...field.Expr) IPlatformDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p platformDo) LeftJoin(table schema.Tabler, on ...field.Expr) IPlatformDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p platformDo) RightJoin(table schema.Tabler, on ...field.Expr) IPlatformDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p platformDo) Group(cols ...field.Expr) IPlatformDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p platformDo) Having(conds ...gen.Condition) IPlatformDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p platformDo) Limit(limit int) IPlatformDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p platformDo) Offset(offset int) IPlatformDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p platformDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IPlatformDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p platformDo) Unscoped() IPlatformDo {
	return p.withDO(p.DO.Unscoped())
}

func (p platformDo) Create(values ...*model.Platform) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p platformDo) CreateInBatches(values []*model.Platform, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p platformDo) Save(values ...*model.Platform) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p platformDo) First() (*model.Platform, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Platform), nil
	}
}

func (p platformDo) Take() (*model.Platform, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Platform), nil
	}
}

func (p platformDo) Last() (*model.Platform, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Platform), nil
	}
}

func (p platformDo) Find() ([]*model.Platform, error) {
	result, err := p.DO.Find()
	return result.([]*model.Platform), err
}

func (p platformDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Platform, err error) {
	buf := make([]*model.Platform, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p platformDo) FindInBatches(result *[]*model.Platform, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p platformDo) Attrs(attrs ...field.AssignExpr) IPlatformDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p platformDo) Assign(attrs ...field.AssignExpr) IPlatformDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p platformDo) Joins(fields ...field.RelationField) IPlatformDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p platformDo) Preload(fields ...field.RelationField) IPlatformDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p platformDo) FirstOrInit() (*model.Platform, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Platform), nil
	}
}

func (p platformDo) FirstOrCreate() (*model.Platform, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Platform), nil
	}
}

func (p platformDo) FindByPage(offset int, limit int) (result []*model.Platform, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p platformDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p platformDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p platformDo) Delete(models ...*model.Platform) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *platformDo) withDO(do gen.Dao) *platformDo {
	p.DO = *do.(*gen.DO)
	return p
}
