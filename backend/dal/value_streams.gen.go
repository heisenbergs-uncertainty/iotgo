// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"app/model"
)

func newValueStream(db *gorm.DB, opts ...gen.DOOption) valueStream {
	_valueStream := valueStream{}

	_valueStream.valueStreamDo.UseDB(db, opts...)
	_valueStream.valueStreamDo.UseModel(&model.ValueStream{})

	tableName := _valueStream.valueStreamDo.TableName()
	_valueStream.ALL = field.NewAsterisk(tableName)
	_valueStream.ID = field.NewUint(tableName, "id")
	_valueStream.CreatedAt = field.NewTime(tableName, "created_at")
	_valueStream.UpdatedAt = field.NewTime(tableName, "updated_at")
	_valueStream.DeletedAt = field.NewField(tableName, "deleted_at")
	_valueStream.Name = field.NewString(tableName, "name")
	_valueStream.Description = field.NewString(tableName, "description")
	_valueStream.Type = field.NewString(tableName, "type")
	_valueStream.IsActive = field.NewBool(tableName, "is_active")
	_valueStream.Metadata = field.NewString(tableName, "metadata")
	_valueStream.Devices = valueStreamHasManyDevices{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Devices", "model.Device"),
		Site: struct {
			field.RelationField
			Devices struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Devices.Site", "model.Site"),
			Devices: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Devices.Site.Devices", "model.Device"),
			},
		},
		ValueStream: struct {
			field.RelationField
			Devices struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Devices.ValueStream", "model.ValueStream"),
			Devices: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Devices.ValueStream.Devices", "model.Device"),
			},
		},
		Platforms: struct {
			field.RelationField
			Resources struct {
				field.RelationField
			}
			Devices struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Devices.Platforms", "model.Platform"),
			Resources: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Devices.Platforms.Resources", "model.Resource"),
			},
			Devices: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Devices.Platforms.Devices", "model.Device"),
			},
		},
	}

	_valueStream.fillFieldMap()

	return _valueStream
}

type valueStream struct {
	valueStreamDo

	ALL         field.Asterisk
	ID          field.Uint
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Name        field.String
	Description field.String
	Type        field.String
	IsActive    field.Bool
	Metadata    field.String
	Devices     valueStreamHasManyDevices

	fieldMap map[string]field.Expr
}

func (v valueStream) Table(newTableName string) *valueStream {
	v.valueStreamDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v valueStream) As(alias string) *valueStream {
	v.valueStreamDo.DO = *(v.valueStreamDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *valueStream) updateTableName(table string) *valueStream {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewUint(table, "id")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.DeletedAt = field.NewField(table, "deleted_at")
	v.Name = field.NewString(table, "name")
	v.Description = field.NewString(table, "description")
	v.Type = field.NewString(table, "type")
	v.IsActive = field.NewBool(table, "is_active")
	v.Metadata = field.NewString(table, "metadata")

	v.fillFieldMap()

	return v
}

func (v *valueStream) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *valueStream) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 10)
	v.fieldMap["id"] = v.ID
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
	v.fieldMap["name"] = v.Name
	v.fieldMap["description"] = v.Description
	v.fieldMap["type"] = v.Type
	v.fieldMap["is_active"] = v.IsActive
	v.fieldMap["metadata"] = v.Metadata

}

func (v valueStream) clone(db *gorm.DB) valueStream {
	v.valueStreamDo.ReplaceConnPool(db.Statement.ConnPool)
	v.Devices.db = db.Session(&gorm.Session{Initialized: true})
	v.Devices.db.Statement.ConnPool = db.Statement.ConnPool
	return v
}

func (v valueStream) replaceDB(db *gorm.DB) valueStream {
	v.valueStreamDo.ReplaceDB(db)
	v.Devices.db = db.Session(&gorm.Session{})
	return v
}

type valueStreamHasManyDevices struct {
	db *gorm.DB

	field.RelationField

	Site struct {
		field.RelationField
		Devices struct {
			field.RelationField
		}
	}
	ValueStream struct {
		field.RelationField
		Devices struct {
			field.RelationField
		}
	}
	Platforms struct {
		field.RelationField
		Resources struct {
			field.RelationField
		}
		Devices struct {
			field.RelationField
		}
	}
}

func (a valueStreamHasManyDevices) Where(conds ...field.Expr) *valueStreamHasManyDevices {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a valueStreamHasManyDevices) WithContext(ctx context.Context) *valueStreamHasManyDevices {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a valueStreamHasManyDevices) Session(session *gorm.Session) *valueStreamHasManyDevices {
	a.db = a.db.Session(session)
	return &a
}

func (a valueStreamHasManyDevices) Model(m *model.ValueStream) *valueStreamHasManyDevicesTx {
	return &valueStreamHasManyDevicesTx{a.db.Model(m).Association(a.Name())}
}

func (a valueStreamHasManyDevices) Unscoped() *valueStreamHasManyDevices {
	a.db = a.db.Unscoped()
	return &a
}

type valueStreamHasManyDevicesTx struct{ tx *gorm.Association }

func (a valueStreamHasManyDevicesTx) Find() (result []*model.Device, err error) {
	return result, a.tx.Find(&result)
}

func (a valueStreamHasManyDevicesTx) Append(values ...*model.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a valueStreamHasManyDevicesTx) Replace(values ...*model.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a valueStreamHasManyDevicesTx) Delete(values ...*model.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a valueStreamHasManyDevicesTx) Clear() error {
	return a.tx.Clear()
}

func (a valueStreamHasManyDevicesTx) Count() int64 {
	return a.tx.Count()
}

func (a valueStreamHasManyDevicesTx) Unscoped() *valueStreamHasManyDevicesTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type valueStreamDo struct{ gen.DO }

type IValueStreamDo interface {
	gen.SubQuery
	Debug() IValueStreamDo
	WithContext(ctx context.Context) IValueStreamDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IValueStreamDo
	WriteDB() IValueStreamDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IValueStreamDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IValueStreamDo
	Not(conds ...gen.Condition) IValueStreamDo
	Or(conds ...gen.Condition) IValueStreamDo
	Select(conds ...field.Expr) IValueStreamDo
	Where(conds ...gen.Condition) IValueStreamDo
	Order(conds ...field.Expr) IValueStreamDo
	Distinct(cols ...field.Expr) IValueStreamDo
	Omit(cols ...field.Expr) IValueStreamDo
	Join(table schema.Tabler, on ...field.Expr) IValueStreamDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IValueStreamDo
	RightJoin(table schema.Tabler, on ...field.Expr) IValueStreamDo
	Group(cols ...field.Expr) IValueStreamDo
	Having(conds ...gen.Condition) IValueStreamDo
	Limit(limit int) IValueStreamDo
	Offset(offset int) IValueStreamDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IValueStreamDo
	Unscoped() IValueStreamDo
	Create(values ...*model.ValueStream) error
	CreateInBatches(values []*model.ValueStream, batchSize int) error
	Save(values ...*model.ValueStream) error
	First() (*model.ValueStream, error)
	Take() (*model.ValueStream, error)
	Last() (*model.ValueStream, error)
	Find() ([]*model.ValueStream, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ValueStream, err error)
	FindInBatches(result *[]*model.ValueStream, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ValueStream) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IValueStreamDo
	Assign(attrs ...field.AssignExpr) IValueStreamDo
	Joins(fields ...field.RelationField) IValueStreamDo
	Preload(fields ...field.RelationField) IValueStreamDo
	FirstOrInit() (*model.ValueStream, error)
	FirstOrCreate() (*model.ValueStream, error)
	FindByPage(offset int, limit int) (result []*model.ValueStream, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IValueStreamDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (v valueStreamDo) Debug() IValueStreamDo {
	return v.withDO(v.DO.Debug())
}

func (v valueStreamDo) WithContext(ctx context.Context) IValueStreamDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v valueStreamDo) ReadDB() IValueStreamDo {
	return v.Clauses(dbresolver.Read)
}

func (v valueStreamDo) WriteDB() IValueStreamDo {
	return v.Clauses(dbresolver.Write)
}

func (v valueStreamDo) Session(config *gorm.Session) IValueStreamDo {
	return v.withDO(v.DO.Session(config))
}

func (v valueStreamDo) Clauses(conds ...clause.Expression) IValueStreamDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v valueStreamDo) Returning(value interface{}, columns ...string) IValueStreamDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v valueStreamDo) Not(conds ...gen.Condition) IValueStreamDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v valueStreamDo) Or(conds ...gen.Condition) IValueStreamDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v valueStreamDo) Select(conds ...field.Expr) IValueStreamDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v valueStreamDo) Where(conds ...gen.Condition) IValueStreamDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v valueStreamDo) Order(conds ...field.Expr) IValueStreamDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v valueStreamDo) Distinct(cols ...field.Expr) IValueStreamDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v valueStreamDo) Omit(cols ...field.Expr) IValueStreamDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v valueStreamDo) Join(table schema.Tabler, on ...field.Expr) IValueStreamDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v valueStreamDo) LeftJoin(table schema.Tabler, on ...field.Expr) IValueStreamDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v valueStreamDo) RightJoin(table schema.Tabler, on ...field.Expr) IValueStreamDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v valueStreamDo) Group(cols ...field.Expr) IValueStreamDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v valueStreamDo) Having(conds ...gen.Condition) IValueStreamDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v valueStreamDo) Limit(limit int) IValueStreamDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v valueStreamDo) Offset(offset int) IValueStreamDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v valueStreamDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IValueStreamDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v valueStreamDo) Unscoped() IValueStreamDo {
	return v.withDO(v.DO.Unscoped())
}

func (v valueStreamDo) Create(values ...*model.ValueStream) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v valueStreamDo) CreateInBatches(values []*model.ValueStream, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v valueStreamDo) Save(values ...*model.ValueStream) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v valueStreamDo) First() (*model.ValueStream, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ValueStream), nil
	}
}

func (v valueStreamDo) Take() (*model.ValueStream, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ValueStream), nil
	}
}

func (v valueStreamDo) Last() (*model.ValueStream, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ValueStream), nil
	}
}

func (v valueStreamDo) Find() ([]*model.ValueStream, error) {
	result, err := v.DO.Find()
	return result.([]*model.ValueStream), err
}

func (v valueStreamDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ValueStream, err error) {
	buf := make([]*model.ValueStream, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v valueStreamDo) FindInBatches(result *[]*model.ValueStream, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v valueStreamDo) Attrs(attrs ...field.AssignExpr) IValueStreamDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v valueStreamDo) Assign(attrs ...field.AssignExpr) IValueStreamDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v valueStreamDo) Joins(fields ...field.RelationField) IValueStreamDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v valueStreamDo) Preload(fields ...field.RelationField) IValueStreamDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v valueStreamDo) FirstOrInit() (*model.ValueStream, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ValueStream), nil
	}
}

func (v valueStreamDo) FirstOrCreate() (*model.ValueStream, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ValueStream), nil
	}
}

func (v valueStreamDo) FindByPage(offset int, limit int) (result []*model.ValueStream, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v valueStreamDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v valueStreamDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v valueStreamDo) Delete(models ...*model.ValueStream) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *valueStreamDo) withDO(do gen.Dao) *valueStreamDo {
	v.DO = *do.(*gen.DO)
	return v
}
