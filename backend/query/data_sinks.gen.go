// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newDataSink(db *gorm.DB, opts ...gen.DOOption) dataSink {
	_dataSink := dataSink{}

	_dataSink.dataSinkDo.UseDB(db, opts...)
	_dataSink.dataSinkDo.UseModel(&model.DataSink{})

	tableName := _dataSink.dataSinkDo.TableName()
	_dataSink.ALL = field.NewAsterisk(tableName)
	_dataSink.ID = field.NewUint(tableName, "id")
	_dataSink.CreatedAt = field.NewTime(tableName, "created_at")
	_dataSink.UpdatedAt = field.NewTime(tableName, "updated_at")
	_dataSink.DeletedAt = field.NewField(tableName, "deleted_at")
	_dataSink.SinkType = field.NewString(tableName, "sink_type")
	_dataSink.ConnectionDetails = field.NewString(tableName, "connection_details")
	_dataSink.Status = field.NewString(tableName, "status")

	_dataSink.fillFieldMap()

	return _dataSink
}

type dataSink struct {
	dataSinkDo dataSinkDo

	ALL               field.Asterisk
	ID                field.Uint
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field
	SinkType          field.String
	ConnectionDetails field.String
	Status            field.String

	fieldMap map[string]field.Expr
}

func (d dataSink) Table(newTableName string) *dataSink {
	d.dataSinkDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dataSink) As(alias string) *dataSink {
	d.dataSinkDo.DO = *(d.dataSinkDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dataSink) updateTableName(table string) *dataSink {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewUint(table, "id")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewField(table, "deleted_at")
	d.SinkType = field.NewString(table, "sink_type")
	d.ConnectionDetails = field.NewString(table, "connection_details")
	d.Status = field.NewString(table, "status")

	d.fillFieldMap()

	return d
}

func (d *dataSink) WithContext(ctx context.Context) IDataSinkDo { return d.dataSinkDo.WithContext(ctx) }

func (d dataSink) TableName() string { return d.dataSinkDo.TableName() }

func (d dataSink) Alias() string { return d.dataSinkDo.Alias() }

func (d dataSink) Columns(cols ...field.Expr) gen.Columns { return d.dataSinkDo.Columns(cols...) }

func (d *dataSink) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dataSink) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 7)
	d.fieldMap["id"] = d.ID
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
	d.fieldMap["sink_type"] = d.SinkType
	d.fieldMap["connection_details"] = d.ConnectionDetails
	d.fieldMap["status"] = d.Status
}

func (d dataSink) clone(db *gorm.DB) dataSink {
	d.dataSinkDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dataSink) replaceDB(db *gorm.DB) dataSink {
	d.dataSinkDo.ReplaceDB(db)
	return d
}

type dataSinkDo struct{ gen.DO }

type IDataSinkDo interface {
	gen.SubQuery
	Debug() IDataSinkDo
	WithContext(ctx context.Context) IDataSinkDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDataSinkDo
	WriteDB() IDataSinkDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDataSinkDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDataSinkDo
	Not(conds ...gen.Condition) IDataSinkDo
	Or(conds ...gen.Condition) IDataSinkDo
	Select(conds ...field.Expr) IDataSinkDo
	Where(conds ...gen.Condition) IDataSinkDo
	Order(conds ...field.Expr) IDataSinkDo
	Distinct(cols ...field.Expr) IDataSinkDo
	Omit(cols ...field.Expr) IDataSinkDo
	Join(table schema.Tabler, on ...field.Expr) IDataSinkDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDataSinkDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDataSinkDo
	Group(cols ...field.Expr) IDataSinkDo
	Having(conds ...gen.Condition) IDataSinkDo
	Limit(limit int) IDataSinkDo
	Offset(offset int) IDataSinkDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDataSinkDo
	Unscoped() IDataSinkDo
	Create(values ...*model.DataSink) error
	CreateInBatches(values []*model.DataSink, batchSize int) error
	Save(values ...*model.DataSink) error
	First() (*model.DataSink, error)
	Take() (*model.DataSink, error)
	Last() (*model.DataSink, error)
	Find() ([]*model.DataSink, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataSink, err error)
	FindInBatches(result *[]*model.DataSink, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DataSink) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDataSinkDo
	Assign(attrs ...field.AssignExpr) IDataSinkDo
	Joins(fields ...field.RelationField) IDataSinkDo
	Preload(fields ...field.RelationField) IDataSinkDo
	FirstOrInit() (*model.DataSink, error)
	FirstOrCreate() (*model.DataSink, error)
	FindByPage(offset int, limit int) (result []*model.DataSink, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDataSinkDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.DataSink, err error)
	GetByID(id int) (result model.DataSink, err error)
	GetByRoles(rolesName []string) (result []*model.DataSink, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (d dataSinkDo) FilterWithNameAndRole(name string, role string) (result []model.DataSink, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM data_sinks WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE id=@id
func (d dataSinkDo) GetByID(id int) (result model.DataSink, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM data_sinks WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE role IN @rolesName
func (d dataSinkDo) GetByRoles(rolesName []string) (result []*model.DataSink, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, rolesName)
	generateSQL.WriteString("SELECT * FROM data_sinks WHERE role IN ? ")

	var executeSQL *gorm.DB
	executeSQL = d.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (d dataSinkDo) Debug() IDataSinkDo {
	return d.withDO(d.DO.Debug())
}

func (d dataSinkDo) WithContext(ctx context.Context) IDataSinkDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dataSinkDo) ReadDB() IDataSinkDo {
	return d.Clauses(dbresolver.Read)
}

func (d dataSinkDo) WriteDB() IDataSinkDo {
	return d.Clauses(dbresolver.Write)
}

func (d dataSinkDo) Session(config *gorm.Session) IDataSinkDo {
	return d.withDO(d.DO.Session(config))
}

func (d dataSinkDo) Clauses(conds ...clause.Expression) IDataSinkDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dataSinkDo) Returning(value interface{}, columns ...string) IDataSinkDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dataSinkDo) Not(conds ...gen.Condition) IDataSinkDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dataSinkDo) Or(conds ...gen.Condition) IDataSinkDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dataSinkDo) Select(conds ...field.Expr) IDataSinkDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dataSinkDo) Where(conds ...gen.Condition) IDataSinkDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dataSinkDo) Order(conds ...field.Expr) IDataSinkDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dataSinkDo) Distinct(cols ...field.Expr) IDataSinkDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dataSinkDo) Omit(cols ...field.Expr) IDataSinkDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dataSinkDo) Join(table schema.Tabler, on ...field.Expr) IDataSinkDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dataSinkDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDataSinkDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dataSinkDo) RightJoin(table schema.Tabler, on ...field.Expr) IDataSinkDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dataSinkDo) Group(cols ...field.Expr) IDataSinkDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dataSinkDo) Having(conds ...gen.Condition) IDataSinkDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dataSinkDo) Limit(limit int) IDataSinkDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dataSinkDo) Offset(offset int) IDataSinkDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dataSinkDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDataSinkDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dataSinkDo) Unscoped() IDataSinkDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dataSinkDo) Create(values ...*model.DataSink) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dataSinkDo) CreateInBatches(values []*model.DataSink, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dataSinkDo) Save(values ...*model.DataSink) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dataSinkDo) First() (*model.DataSink, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataSink), nil
	}
}

func (d dataSinkDo) Take() (*model.DataSink, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataSink), nil
	}
}

func (d dataSinkDo) Last() (*model.DataSink, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataSink), nil
	}
}

func (d dataSinkDo) Find() ([]*model.DataSink, error) {
	result, err := d.DO.Find()
	return result.([]*model.DataSink), err
}

func (d dataSinkDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataSink, err error) {
	buf := make([]*model.DataSink, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dataSinkDo) FindInBatches(result *[]*model.DataSink, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dataSinkDo) Attrs(attrs ...field.AssignExpr) IDataSinkDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dataSinkDo) Assign(attrs ...field.AssignExpr) IDataSinkDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dataSinkDo) Joins(fields ...field.RelationField) IDataSinkDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dataSinkDo) Preload(fields ...field.RelationField) IDataSinkDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dataSinkDo) FirstOrInit() (*model.DataSink, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataSink), nil
	}
}

func (d dataSinkDo) FirstOrCreate() (*model.DataSink, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataSink), nil
	}
}

func (d dataSinkDo) FindByPage(offset int, limit int) (result []*model.DataSink, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dataSinkDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dataSinkDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dataSinkDo) Delete(models ...*model.DataSink) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dataSinkDo) withDO(do gen.Dao) *dataSinkDo {
	d.DO = *do.(*gen.DO)
	return d
}
