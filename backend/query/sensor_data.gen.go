// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
)

func newSensorData(db *gorm.DB, opts ...gen.DOOption) sensorData {
	_sensorData := sensorData{}

	_sensorData.sensorDataDo.UseDB(db, opts...)
	_sensorData.sensorDataDo.UseModel(&model.SensorData{})

	tableName := _sensorData.sensorDataDo.TableName()
	_sensorData.ALL = field.NewAsterisk(tableName)
	_sensorData.ID = field.NewUint(tableName, "id")
	_sensorData.CreatedAt = field.NewTime(tableName, "created_at")
	_sensorData.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sensorData.DeletedAt = field.NewField(tableName, "deleted_at")
	_sensorData.DeviceID = field.NewUint(tableName, "device_id")
	_sensorData.SourceID = field.NewUint(tableName, "source_id")
	_sensorData.SinkID = field.NewUint(tableName, "sink_id")
	_sensorData.Timestamp = field.NewTime(tableName, "timestamp")
	_sensorData.SensorType = field.NewString(tableName, "sensor_type")
	_sensorData.Value = field.NewFloat64(tableName, "value")
	_sensorData.Device = sensorDataBelongsToDevice{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Device", "model.Device"),
	}

	_sensorData.DataSource = sensorDataBelongsToDataSource{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("DataSource", "model.DataSource"),
	}

	_sensorData.DataSink = sensorDataBelongsToDataSink{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("DataSink", "model.DataSink"),
	}

	_sensorData.fillFieldMap()

	return _sensorData
}

type sensorData struct {
	sensorDataDo sensorDataDo

	ALL        field.Asterisk
	ID         field.Uint
	CreatedAt  field.Time
	UpdatedAt  field.Time
	DeletedAt  field.Field
	DeviceID   field.Uint
	SourceID   field.Uint
	SinkID     field.Uint
	Timestamp  field.Time
	SensorType field.String
	Value      field.Float64
	Device     sensorDataBelongsToDevice

	DataSource sensorDataBelongsToDataSource

	DataSink sensorDataBelongsToDataSink

	fieldMap map[string]field.Expr
}

func (s sensorData) Table(newTableName string) *sensorData {
	s.sensorDataDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sensorData) As(alias string) *sensorData {
	s.sensorDataDo.DO = *(s.sensorDataDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sensorData) updateTableName(table string) *sensorData {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewUint(table, "id")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.DeviceID = field.NewUint(table, "device_id")
	s.SourceID = field.NewUint(table, "source_id")
	s.SinkID = field.NewUint(table, "sink_id")
	s.Timestamp = field.NewTime(table, "timestamp")
	s.SensorType = field.NewString(table, "sensor_type")
	s.Value = field.NewFloat64(table, "value")

	s.fillFieldMap()

	return s
}

func (s *sensorData) WithContext(ctx context.Context) ISensorDataDo {
	return s.sensorDataDo.WithContext(ctx)
}

func (s sensorData) TableName() string { return s.sensorDataDo.TableName() }

func (s sensorData) Alias() string { return s.sensorDataDo.Alias() }

func (s sensorData) Columns(cols ...field.Expr) gen.Columns { return s.sensorDataDo.Columns(cols...) }

func (s *sensorData) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sensorData) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 13)
	s.fieldMap["id"] = s.ID
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["device_id"] = s.DeviceID
	s.fieldMap["source_id"] = s.SourceID
	s.fieldMap["sink_id"] = s.SinkID
	s.fieldMap["timestamp"] = s.Timestamp
	s.fieldMap["sensor_type"] = s.SensorType
	s.fieldMap["value"] = s.Value

}

func (s sensorData) clone(db *gorm.DB) sensorData {
	s.sensorDataDo.ReplaceConnPool(db.Statement.ConnPool)
	s.Device.db = db.Session(&gorm.Session{Initialized: true})
	s.Device.db.Statement.ConnPool = db.Statement.ConnPool
	s.DataSource.db = db.Session(&gorm.Session{Initialized: true})
	s.DataSource.db.Statement.ConnPool = db.Statement.ConnPool
	s.DataSink.db = db.Session(&gorm.Session{Initialized: true})
	s.DataSink.db.Statement.ConnPool = db.Statement.ConnPool
	return s
}

func (s sensorData) replaceDB(db *gorm.DB) sensorData {
	s.sensorDataDo.ReplaceDB(db)
	s.Device.db = db.Session(&gorm.Session{})
	s.DataSource.db = db.Session(&gorm.Session{})
	s.DataSink.db = db.Session(&gorm.Session{})
	return s
}

type sensorDataBelongsToDevice struct {
	db *gorm.DB

	field.RelationField
}

func (a sensorDataBelongsToDevice) Where(conds ...field.Expr) *sensorDataBelongsToDevice {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sensorDataBelongsToDevice) WithContext(ctx context.Context) *sensorDataBelongsToDevice {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sensorDataBelongsToDevice) Session(session *gorm.Session) *sensorDataBelongsToDevice {
	a.db = a.db.Session(session)
	return &a
}

func (a sensorDataBelongsToDevice) Model(m *model.SensorData) *sensorDataBelongsToDeviceTx {
	return &sensorDataBelongsToDeviceTx{a.db.Model(m).Association(a.Name())}
}

func (a sensorDataBelongsToDevice) Unscoped() *sensorDataBelongsToDevice {
	a.db = a.db.Unscoped()
	return &a
}

type sensorDataBelongsToDeviceTx struct{ tx *gorm.Association }

func (a sensorDataBelongsToDeviceTx) Find() (result *model.Device, err error) {
	return result, a.tx.Find(&result)
}

func (a sensorDataBelongsToDeviceTx) Append(values ...*model.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sensorDataBelongsToDeviceTx) Replace(values ...*model.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sensorDataBelongsToDeviceTx) Delete(values ...*model.Device) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sensorDataBelongsToDeviceTx) Clear() error {
	return a.tx.Clear()
}

func (a sensorDataBelongsToDeviceTx) Count() int64 {
	return a.tx.Count()
}

func (a sensorDataBelongsToDeviceTx) Unscoped() *sensorDataBelongsToDeviceTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type sensorDataBelongsToDataSource struct {
	db *gorm.DB

	field.RelationField
}

func (a sensorDataBelongsToDataSource) Where(conds ...field.Expr) *sensorDataBelongsToDataSource {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sensorDataBelongsToDataSource) WithContext(ctx context.Context) *sensorDataBelongsToDataSource {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sensorDataBelongsToDataSource) Session(session *gorm.Session) *sensorDataBelongsToDataSource {
	a.db = a.db.Session(session)
	return &a
}

func (a sensorDataBelongsToDataSource) Model(m *model.SensorData) *sensorDataBelongsToDataSourceTx {
	return &sensorDataBelongsToDataSourceTx{a.db.Model(m).Association(a.Name())}
}

func (a sensorDataBelongsToDataSource) Unscoped() *sensorDataBelongsToDataSource {
	a.db = a.db.Unscoped()
	return &a
}

type sensorDataBelongsToDataSourceTx struct{ tx *gorm.Association }

func (a sensorDataBelongsToDataSourceTx) Find() (result *model.DataSource, err error) {
	return result, a.tx.Find(&result)
}

func (a sensorDataBelongsToDataSourceTx) Append(values ...*model.DataSource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sensorDataBelongsToDataSourceTx) Replace(values ...*model.DataSource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sensorDataBelongsToDataSourceTx) Delete(values ...*model.DataSource) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sensorDataBelongsToDataSourceTx) Clear() error {
	return a.tx.Clear()
}

func (a sensorDataBelongsToDataSourceTx) Count() int64 {
	return a.tx.Count()
}

func (a sensorDataBelongsToDataSourceTx) Unscoped() *sensorDataBelongsToDataSourceTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type sensorDataBelongsToDataSink struct {
	db *gorm.DB

	field.RelationField
}

func (a sensorDataBelongsToDataSink) Where(conds ...field.Expr) *sensorDataBelongsToDataSink {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a sensorDataBelongsToDataSink) WithContext(ctx context.Context) *sensorDataBelongsToDataSink {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a sensorDataBelongsToDataSink) Session(session *gorm.Session) *sensorDataBelongsToDataSink {
	a.db = a.db.Session(session)
	return &a
}

func (a sensorDataBelongsToDataSink) Model(m *model.SensorData) *sensorDataBelongsToDataSinkTx {
	return &sensorDataBelongsToDataSinkTx{a.db.Model(m).Association(a.Name())}
}

func (a sensorDataBelongsToDataSink) Unscoped() *sensorDataBelongsToDataSink {
	a.db = a.db.Unscoped()
	return &a
}

type sensorDataBelongsToDataSinkTx struct{ tx *gorm.Association }

func (a sensorDataBelongsToDataSinkTx) Find() (result *model.DataSink, err error) {
	return result, a.tx.Find(&result)
}

func (a sensorDataBelongsToDataSinkTx) Append(values ...*model.DataSink) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a sensorDataBelongsToDataSinkTx) Replace(values ...*model.DataSink) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a sensorDataBelongsToDataSinkTx) Delete(values ...*model.DataSink) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a sensorDataBelongsToDataSinkTx) Clear() error {
	return a.tx.Clear()
}

func (a sensorDataBelongsToDataSinkTx) Count() int64 {
	return a.tx.Count()
}

func (a sensorDataBelongsToDataSinkTx) Unscoped() *sensorDataBelongsToDataSinkTx {
	a.tx = a.tx.Unscoped()
	return &a
}

type sensorDataDo struct{ gen.DO }

type ISensorDataDo interface {
	gen.SubQuery
	Debug() ISensorDataDo
	WithContext(ctx context.Context) ISensorDataDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISensorDataDo
	WriteDB() ISensorDataDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISensorDataDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISensorDataDo
	Not(conds ...gen.Condition) ISensorDataDo
	Or(conds ...gen.Condition) ISensorDataDo
	Select(conds ...field.Expr) ISensorDataDo
	Where(conds ...gen.Condition) ISensorDataDo
	Order(conds ...field.Expr) ISensorDataDo
	Distinct(cols ...field.Expr) ISensorDataDo
	Omit(cols ...field.Expr) ISensorDataDo
	Join(table schema.Tabler, on ...field.Expr) ISensorDataDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISensorDataDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISensorDataDo
	Group(cols ...field.Expr) ISensorDataDo
	Having(conds ...gen.Condition) ISensorDataDo
	Limit(limit int) ISensorDataDo
	Offset(offset int) ISensorDataDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISensorDataDo
	Unscoped() ISensorDataDo
	Create(values ...*model.SensorData) error
	CreateInBatches(values []*model.SensorData, batchSize int) error
	Save(values ...*model.SensorData) error
	First() (*model.SensorData, error)
	Take() (*model.SensorData, error)
	Last() (*model.SensorData, error)
	Find() ([]*model.SensorData, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SensorData, err error)
	FindInBatches(result *[]*model.SensorData, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SensorData) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISensorDataDo
	Assign(attrs ...field.AssignExpr) ISensorDataDo
	Joins(fields ...field.RelationField) ISensorDataDo
	Preload(fields ...field.RelationField) ISensorDataDo
	FirstOrInit() (*model.SensorData, error)
	FirstOrCreate() (*model.SensorData, error)
	FindByPage(offset int, limit int) (result []*model.SensorData, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISensorDataDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	FilterWithNameAndRole(name string, role string) (result []model.SensorData, err error)
	GetByID(id int) (result model.SensorData, err error)
	GetByRoles(rolesName []string) (result []*model.SensorData, err error)
}

// SELECT * FROM @@table WHERE name = @name{{if role !=""}} AND role = @role{{end}}
func (s sensorDataDo) FilterWithNameAndRole(name string, role string) (result []model.SensorData, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, name)
	generateSQL.WriteString("SELECT * FROM sensor_data WHERE name = ? ")
	if role != "" {
		params = append(params, role)
		generateSQL.WriteString("AND role = ? ")
	}

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE id=@id
func (s sensorDataDo) GetByID(id int) (result model.SensorData, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM sensor_data WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

// SELECT * FROM @@table WHERE role IN @rolesName
func (s sensorDataDo) GetByRoles(rolesName []string) (result []*model.SensorData, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, rolesName)
	generateSQL.WriteString("SELECT * FROM sensor_data WHERE role IN ? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Find(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s sensorDataDo) Debug() ISensorDataDo {
	return s.withDO(s.DO.Debug())
}

func (s sensorDataDo) WithContext(ctx context.Context) ISensorDataDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sensorDataDo) ReadDB() ISensorDataDo {
	return s.Clauses(dbresolver.Read)
}

func (s sensorDataDo) WriteDB() ISensorDataDo {
	return s.Clauses(dbresolver.Write)
}

func (s sensorDataDo) Session(config *gorm.Session) ISensorDataDo {
	return s.withDO(s.DO.Session(config))
}

func (s sensorDataDo) Clauses(conds ...clause.Expression) ISensorDataDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sensorDataDo) Returning(value interface{}, columns ...string) ISensorDataDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sensorDataDo) Not(conds ...gen.Condition) ISensorDataDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sensorDataDo) Or(conds ...gen.Condition) ISensorDataDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sensorDataDo) Select(conds ...field.Expr) ISensorDataDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sensorDataDo) Where(conds ...gen.Condition) ISensorDataDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sensorDataDo) Order(conds ...field.Expr) ISensorDataDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sensorDataDo) Distinct(cols ...field.Expr) ISensorDataDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sensorDataDo) Omit(cols ...field.Expr) ISensorDataDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sensorDataDo) Join(table schema.Tabler, on ...field.Expr) ISensorDataDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sensorDataDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISensorDataDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sensorDataDo) RightJoin(table schema.Tabler, on ...field.Expr) ISensorDataDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sensorDataDo) Group(cols ...field.Expr) ISensorDataDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sensorDataDo) Having(conds ...gen.Condition) ISensorDataDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sensorDataDo) Limit(limit int) ISensorDataDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sensorDataDo) Offset(offset int) ISensorDataDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sensorDataDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISensorDataDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sensorDataDo) Unscoped() ISensorDataDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sensorDataDo) Create(values ...*model.SensorData) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sensorDataDo) CreateInBatches(values []*model.SensorData, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sensorDataDo) Save(values ...*model.SensorData) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sensorDataDo) First() (*model.SensorData, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SensorData), nil
	}
}

func (s sensorDataDo) Take() (*model.SensorData, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SensorData), nil
	}
}

func (s sensorDataDo) Last() (*model.SensorData, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SensorData), nil
	}
}

func (s sensorDataDo) Find() ([]*model.SensorData, error) {
	result, err := s.DO.Find()
	return result.([]*model.SensorData), err
}

func (s sensorDataDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SensorData, err error) {
	buf := make([]*model.SensorData, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sensorDataDo) FindInBatches(result *[]*model.SensorData, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sensorDataDo) Attrs(attrs ...field.AssignExpr) ISensorDataDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sensorDataDo) Assign(attrs ...field.AssignExpr) ISensorDataDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sensorDataDo) Joins(fields ...field.RelationField) ISensorDataDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sensorDataDo) Preload(fields ...field.RelationField) ISensorDataDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sensorDataDo) FirstOrInit() (*model.SensorData, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SensorData), nil
	}
}

func (s sensorDataDo) FirstOrCreate() (*model.SensorData, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SensorData), nil
	}
}

func (s sensorDataDo) FindByPage(offset int, limit int) (result []*model.SensorData, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sensorDataDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sensorDataDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sensorDataDo) Delete(models ...*model.SensorData) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sensorDataDo) withDO(do gen.Dao) *sensorDataDo {
	s.DO = *do.(*gen.DO)
	return s
}
